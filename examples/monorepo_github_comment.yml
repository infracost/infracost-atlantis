# This example shows how to use compost with Atlantis and Infracost to post a comment with the Infracost result.
# This uses a pre-workflow hook to create a placeholder comment, which is then updated with the results as the workflow runs.
# The behavior of the comment can be changed by changing the 'hide-and-new' argument in the pre-workflow hook.
# 
# To run this:
# export GITHUB_TOKEN=<your-github-token>
# export INFRACOST_API_KEY=<your-infracost-api-token>
# docker run -p 4141:4141 -e GITHUB_TOKEN=$GITHUB_TOKEN -e INFRACOST_API_KEY=$INFRACOST_API_KEY \
#   --mount type=bind,source=$(pwd)/examples/monorepo_github_comment.yml,target=/home/atlantis/repo.yml \
#   infracost/infracost-atlantis:compost-test server \
#   --gh-user=<your-github-user> \
#   --gh-token=$GITHUB_TOKEN \
#   --gh-webhook-secret=<your-github-webhook-secret> \
#   --repo-allowlist='github.com/your-org/*' --repo-config=/home/atlantis/repo.yml
repos:
  - id: /.*/
    workflow: terraform-infracost
    pre_workflow_hooks:
      # Clean up any files left over from the last run
      - run: rm -r /tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM-*.*
      # Create placeholder comment that is updated during the workflow
      # The behavior can be 'update', 'new', 'hide-and-new', 'delete-and-new'
      - run: compost github hide-and-new $BASE_REPO_OWNER/$BASE_REPO_NAME pr $PULL_NUM --body="This comment will be updated with the Infracost estimate."
workflows:
  terraform-infracost:
    plan:
      steps:
        - init
        - plan
        # Run Infracost breakdown and save to a tempfile, namespaced by this project, PR, workspace and dir
        - run: infracost breakdown --path=$PLANFILE --format=json --log-level=info --out-file=/tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM-$WORKSPACE-$REPO_REL_DIR-infracost.json
        # Generate a comment for all the breakdowns for this workflow. This uses a wildcard so will get updated as more workspaces/dirs run
        - run: infracost output --path=/tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM-*-infracost.json --format=github-comment --out-file=/tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM-infracost-comment.md
        # Use compost to update the placeholder comment with a comment containing the results for all runs so far for this workflow
        - run: compost github update $BASE_REPO_OWNER/$BASE_REPO_NAME pr $PULL_NUM --github-token $GITHUB_TOKEN --body-file=/tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM-infracost-comment.md
